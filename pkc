#!/usr/bin/env bash

set -e

if [ "$EUID" -eq 0 ]; then
    echo "Please don't run as root."
    exit 1
fi

# For output coloring
LIGHT_GREEN='\033[0;32m'
NC='\033[0m' # No Color

usage() {
    cat <<'EOF'
Usage:
  pkc <command>

Options:
  --help
Commands:
  setup     Setup the system for the first time and then run the system
  stop      Gracefully stop the system
  start     Resume running the system from a stopped state
  backup    Run the system backup
  restore   Run the system restore from backup
  nuke      Destroy containers and delete backup data
EOF
}

usage_setup() {
    cat <<'EOF'
Usage:
  pkc setup [OPTIONS]

Set up a PKC instance for the first time.

Options:
  -w, --wallet-address <your crypto wallet address>
  -s, --server         <your server name; defaults to http://localhost:9352>
  --private             disable anonymous page read
  --web-public          expect --server <mediawiki.domain> --siweoidc-server <siwe.domain> --le-email <your@email.com>
  --empty-wiki          setup without default wiki content
  --disable-autobackup  disable MediaWiki auto backup service
EOF
}

check_wallet_address() {
    if [ -z "$WALLET_ADDRESS" ]; then
        echo "Error: you must specify the wallet address."
        usage_setup
        exit 1
    fi

    # https://ethereum.stackexchange.com/questions/1374/how-can-i-check-if-an-ethereum-address-is-valid
    # TODO make this address validation more comprehensive.
    if [[ ! "$WALLET_ADDRESS" =~ ^(0x)?[0-9a-fA-F]{40}$ ]]; then
        echo "Error: Your wallet address is not a valid Ethereum address."
        exit 1
    fi
}

check_dependencies() {
    local initsys

    # Check Docker installation
    if [[ ! -x "$(command -v docker)" ]]; then
        echo "Error: Docker is not yet installed. Aborting PKC installation." >&2
        exit 1
    fi

    # Check docker-compose installation
    if [[ ! -x "$(command -v docker-compose)" ]]; then
        echo "Error: docker-compose is not yet installed. Aborting PKC installation." >&2
        exit 1
    fi

    # Check git installation
    if [[ ! -x "$(command -v git)" ]]; then
        echo "Error: Git is not yet installed. Aborting PKC installation." >&2
        exit 1
    fi

    # Check Docker daemon running
    initsys=$(ps 1 | head -n 2 | tail -n 1 | awk '{print $5}')
    if [[ $initsys == *"systemd"* ]]; then
        echo "systemd init system detected. Ensuring Docker is running..."
        sudo systemctl start docker.service
    elif [[ $initsys == *"launchd"* ]]; then
        echo "launchd init system detected. Ensuring Docker is running..."
        if [[ ! "$(docker version)" == *"Engine"* ]]; then
            open /Applications/Docker.app
            echo "Waiting for Docker Desktop to start..."
        fi
        local i=1
        local sp="/-\|"
        echo -n ' '
        until [[ "$(docker version 2>/dev/null)" == *"Engine"* ]]; do
            # shellcheck disable=SC2059
            printf "\b${sp:i++%${#sp}:1}"
            sleep 1
        done
        echo ""
    fi
}

ensure_submodules() {
    # Ensure submodule dependencies are downloaded
    mkdir -p mountPoint/extensions

    # Ensure MediaWiki_Backup repo exists
    if [ ! -d aqua/MediaWiki_Backup ]; then
        echo "MediaWiki_Backup repo doesn't exist. Downloading..."
        (cd aqua && git clone https://github.com/inblockio/MediaWiki_Backup.git)
    else
        echo "Updating MediaWiki_Backup repo..."
        (cd aqua/MediaWiki_Backup && git pull)
    fi
    ln -sf "$PWD/aqua/MediaWiki_Backup" mountPoint/MediaWiki_Backup

    # Download latest PKC-Content repo
    git submodule update --init --recursive --remote
}

validate_web_public_detail() {
    local pkc_server=$1
    local siweoidc_server=$2
    local letsencrypt_email=$3
    if [ -z "$pkc_server" ]; then
        echo "Error: You specified '--web-public' but didn't specify the MediaWiki server via '--server'"
        exit 1
    fi
    if [[ "$pkc_server" == *"https:"* ]]; then
        echo "Error: Your MediaWiki server must not contain the https scheme"
        exit 1
    fi
    if [ -z "$siweoidc_server" ]; then
        echo "Error: You specified '--web-public' but didn't specify the SIWE OIDC server via '--siweoidc-server'"
        exit 1
    fi
    if [[ "$siweoidc_server" == *"https:"* ]]; then
        echo "Error: Your SIWE OIDC server must not contain the https scheme"
        exit 1
    fi
    if [ -z "$letsencrypt_email" ]; then
        echo "Error: You specified '--web-public' but didn't specify the Let's Encrypt email via '--le-email'"
        exit 1
    fi
}

setup_proxy_server() {
    echo "Setting up Nginx proxy server with Let's Encrypt"
    (cd proxy_server && sudo docker-compose up -d)
    echo "Ensuring that the Nginx server allows 100 MB file upload"
    # See https://github.com/nginx-proxy/nginx-proxy/issues/981#issuecomment-345434827
    sudo docker exec proxy_server_proxy_1 sh -c 'echo "client_max_body_size 100M;" > /etc/nginx/conf.d/custom_proxy_settings.conf'
    (cd proxy_server && sudo docker-compose restart proxy)
    echo "Sleeping for 3s 💤 💤"
    sleep 3
    echo "Proxy setup done!"
}

prepare_web_public() {
    local pkc_server=$1
    local siweoidc_server=$2
    local letsencrypt_email=$3
    setup_proxy_server
    echo "Applying your domain details"
    sed -i "s|MEDIAWIKI_HOST=.*|MEDIAWIKI_HOST=$pkc_server|" .env
    sed -i "s|SIWEOIDC_HOST=.*|SIWEOIDC_HOST=$siweoidc_server|" .env
    sed -i "s/LETSENCRYPT_EMAIL=.*/LETSENCRYPT_EMAIL=$letsencrypt_email/" .env
}

prepare_dotenv() {
    echo '# This file is autogenerated by <pkc setup>' > .env
    cat .env.template >> .env
}

do_docker_compose_up_maybe_backup() {
    if [ "$web_public" = true ]; then
      sudo docker-compose -f docker-compose-web.yml up -d
    else
      sudo docker-compose -f docker-compose-local.yml up -d
    fi
    if [ -f .autobackup ]; then
        echo "Starting cron for auto-backup"
        sudo docker exec micro-pkc-mediawiki service cron start
    fi
}

run_setup() {
    local web_public=false
    local enable_autobackup=true
    while [ "$#" -gt 0 ]; do
        case "$1" in
            -h|--help)
                usage_setup
                exit 0
                ;;
            -w|--wallet-address)
                WALLET_ADDRESS="$2"
                shift
                shift
                ;;
            -s|--server)
                PKC_SERVER="$2"
                shift
                shift
                ;;
            --siweoidc-server)
                SIWEOIDC_SERVER="$2"
                shift
                shift
                ;;
            --le-email)
                LETSENCRYPT_EMAIL="$2"
                shift
                shift
                ;;
            --empty-wiki)
                empty_wiki=true
                shift
                ;;
            --private)
                private=true
                shift
                ;;
            --web-public)
                web_public=true
                shift
                ;;
            --disable-autobackup)
                enable_autobackup=false
                shift
                ;;
            *)    # unknown option
                usage_setup
                exit 0
                ;;
        esac
    done

    check_dependencies
    check_wallet_address
    prepare_dotenv

    # We persists the option of whether auto-backup is enabled or not in .autobackup.
    # TODO: use .env instead
    if [ "$enable_autobackup" = true ]; then
        touch .autobackup
    else
        rm -f .autobackup
    fi

    if [ "$web_public" = true ]; then
        validate_web_public_detail "$PKC_SERVER" "$SIWEOIDC_SERVER" "$LETSENCRYPT_EMAIL"
        echo "MediaWiki server name: $PKC_SERVER"
        echo "SIWE OIDC server name: $SIWEOIDC_SERVER"
        echo "Let's Encrypt email: $LETSENCRYPT_EMAIL"
        prepare_web_public "$PKC_SERVER" "$SIWEOIDC_SERVER" "$LETSENCRYPT_EMAIL"
        # Add https:// scheme
        PKC_SERVER="https://$PKC_SERVER"
        SIWEOIDC_SERVER="https://$SIWEOIDC_SERVER"
    else
        if [ -z "$PKC_SERVER" ]; then
            PKC_SERVER=http://localhost:9352
        fi
		if [ -z "$SIWEOIDC_SERVER" ];  then
			SIWEOIDC_SERVER=http://localhost:9353
		fi
        echo "Server name: $PKC_SERVER"
		echo "SIWE server: $SIWEOIDC_SERVER"
    fi

    # Convert wallet address to lower case
    # This is because the address returned in Metamask API is in lower case
    # WALLET_ADDRESS=$(echo "$WALLET_ADDRESS" | tr "\[A-Z\]" "\[a-z\]")

    ensure_submodules

    echo "Specifying the server name into SIWE OIDC"
    # use perl to account for cross-OS limitations of sed
    # https://stackoverflow.com/questions/4247068/sed-command-with-i-option-failing-on-mac-but-works-on-linux/14813278#14813278
    perl -i -p -e "s|PKC_SERVER|$PKC_SERVER|" .env
	perl -i -p -e "s|SIWEOIDC_SERVER|$SIWEOIDC_SERVER|" .env

    echo "Executing docker-compose up -d. Be prepared to type your password."
    # Support version 1 / 2 of docker-compose
    do_docker_compose_up_maybe_backup
    # Sleep; just to be sure that the container has initialized well.

    if [ -n "$(which nc)" ]; then
        # netcat available
        echo "Waiting for database connection..."
        until nc -z -v -w30 localhost 3306
        do
            sleep 0.1
        done
    else
        echo "netcat not available: Sleeping for 10 seconds to wait for the database to be ready."
        echo "Here's an invitation to grab a ☕ or take a deep breath."
        sleep 10
    fi
    
    echo "Installing MediaWiki"
    # TODO split failure cases and remove || true
    sudo docker exec micro-pkc-mediawiki ./aqua/install_pkc.sh \
                        --wallet-address "$WALLET_ADDRESS" \
                        --pkc-server "$PKC_SERVER" \
                        --siweoidc-server "$SIWEOIDC_SERVER" \
                        ${empty_wiki:+--empty-wiki} \
                        ${private:+--private} || true

    # We always download the favicon fresh, so that it is always up to date.
    echo "Downloading browser favicon"

    # Setting a timeout for the curl command and redirecting stderr to stdout to handle both output and error
    if timeout 15 sudo docker exec micro-pkc-mediawiki bash -c "curl https://raw.githubusercontent.com/inblockio/aqua-branding/main/logos/aqua-white-1024x1024-32x32.png -o favicon.ico 2>&1"; then
        echo "Download favicon successful."
    else
        # This block executes if curl fails due to timeout or any other reason
        case $? in
            124) echo "Favicon download failed after 15 seconds (time out)." ;;
            *) echo "The command failed for a different reason." ;;
        esac
    fi

    # Prepare auto backup
    sudo cp aqua/do_backup_wrapper.sh mountPoint/backup
    if [ "$enable_autobackup" = true ]; then
        echo "Enabling auto-backup every 30 minutes"
        sudo docker exec micro-pkc-mediawiki sh -c '(echo "*/30 * * * * /backup/do_backup_wrapper.sh") | sort - | uniq - | crontab -'
    else
        echo "Note: auto-backup is disabled"
    fi

    echo "Done!"
    echo "Visit $PKC_SERVER to access your PKC instance."
}

stop_container() {
  #check if proxy_server_net network exists. if true = web_public
  if [[ $(sudo docker network ls | grep proxy_server_net ) ]]; then
    sudo docker-compose -f docker-compose-web.yml down
  else
    sudo docker-compose -f docker-compose-local.yml down
  fi
}

restore_all() {
    archive_file=$1
    # Extract tarball and restore images
    docker exec -it micro-pkc-mediawiki /MediaWiki_Backup/extract_and_restore_images.sh -a "/backup/$archive_file" -w /var/www/html
    # Restore database
    docker exec -it micro-pkc-database /MediaWiki_Backup/restore_database.sh /backup/database.sql.gz
    # Clean up database sql file
    docker exec -it micro-pkc-database rm /backup/database.sql.gz
    # Toggle read-only off
    docker exec -it micro-pkc-mediawiki /MediaWiki_Backup/toggle_read_only_off.sh /var/www/html
}

check_docker_compose() {
  if ! command -v docker-compose &> /dev/null;
  then
    install_docker_compose
  elif ! (docker-compose --version | grep "v2.");
  then
    sudo rm -rf $(whereis docker-compose)
    install_docker_compose
  fi
}

install_docker_compose() {
  echo "installing docker-compose!"
  sudo curl -L "https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose
}

if [ $# -eq 0 ]; then
    # If no argument is provided, provide info and exit early.
    usage
    exit 0
fi

# We don't use getopt because we want to support running micro-pkc on macOS.
# macOS has getopt, but it doesn't have `long` option
# See https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
# https://unix.stackexchange.com/questions/520028/parsing-arguments-with-nested-case-statements
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -h|--help)
            usage
            exit 0
            ;;
        setup)
            check_docker_compose
            shift
            run_setup "$@"
            break
            ;;
        stop)
            check_docker_compose
            stop_container
            break
            ;;
        start)
            check_docker_compose
            do_docker_compose_up_maybe_backup
            break
            ;;
        backup)
            sudo docker exec micro-pkc-mediawiki /MediaWiki_Backup/backup.sh \
                    -p "$(date -u +"%Y-%m-%dT%H-%M-%S_UTC")" -d /backup -w /var/www/html -s -f
            echo -e "${LIGHT_GREEN}Done! Your backup is located in ./mountPoint/backup.${NC}"
            break
            ;;
        restore)
            check_docker_compose
            most_recent=$(ls -t mountPoint/backup/*.tar.gz | head -n 1 | xargs basename)
            restore_all "$most_recent"
            # A reset is required to flush outdated cache from the system.
            sudo docker-compose stop
            do_docker_compose_up_maybe_backup
            break
            ;;
        nuke)
            check_docker_compose
            # Check we are in the aqua-PKC repository
            current_repository=$(git config --get remote.origin.url)
            if [[ "$current_repository" != *"aqua-PKC"* ]]; then
                echo "pkc nuke must be run from the aqua-PKC directory. Aborting..."
                exit 1
            fi
            read -r -p $'Destroying containers and deleting backup data. \n\tAre you sure? 😱 [y/N] ' response
            case "$response" in
                [yY][eE][sS]|[yY])
                    echo "💥💥💥💥 Kaaboooom!!!💥💥💥💥"
                    set -x
                    stop_container
                    sudo rm -r mountPoint
                    set +x
                    echo "🏜️ It's all gone 🏜️"
                    ;;
                *)
                    echo "Aborting..."
                    exit 0
                    ;;
            esac
            break
            ;;
        *)    # unknown option
            usage
            exit 0
            ;;
    esac
done
